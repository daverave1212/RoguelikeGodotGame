[gd_scene load_steps=15 format=2]

[ext_resource path="res://Prefabs/Units/UnitOptionalCustomComponents/UnitPlayerController.tscn" type="PackedScene" id=1]
[ext_resource path="res://Prefabs/UI/TargetFollowingUnit.tscn" type="PackedScene" id=2]
[ext_resource path="res://Prefabs/Units/UnitOptionalCustomComponents/UnitAIController.tscn" type="PackedScene" id=3]
[ext_resource path="res://Prefabs/Units/UnitTemplate.tscn" type="PackedScene" id=4]
[ext_resource path="res://Scripts/World.cs" type="Script" id=5]
[ext_resource path="res://Scripts/Terrain/TileManager.cs" type="Script" id=6]
[ext_resource path="res://Scripts/Utilities/Delay.cs" type="Script" id=7]
[ext_resource path="res://Resources/ground_tileset.tres" type="TileSet" id=8]
[ext_resource path="res://Prefabs/Units/UnitPrefabs/DumbBanditUnit.tscn" type="PackedScene" id=10]
[ext_resource path="res://Images/UI/AllAxis_Outline.png" type="Texture" id=12]
[ext_resource path="res://Images/UI/AllAxis_Plain.png" type="Texture" id=13]
[ext_resource path="res://Scripts/InputHandler.cs" type="Script" id=14]
[ext_resource path="res://Prefabs/Weapons/WeaponPrefabs/BroadswordWeapon.tscn" type="PackedScene" id=16]

[sub_resource type="CSharpScript" id=2]
script/source = "using Godot;

public class Unit : KinematicBody2D
{
	const float SHOOT_Y_OFFSET = -8f;

	private UnitStats myCurrentStats, myBaseStats;
	private Vector2 previousFramePosition, currentFramePosition;
	private TextureProgress healthBar;

	public bool IsDead => myCurrentStats.Health == 0;
	public bool IsMoving => previousFramePosition.x != currentFramePosition.x && previousFramePosition.y != currentFramePosition.y;
	public bool IsPlayer => HasNode(\"UnitPlayerController\");
	public bool IsEnemy => HasNode(\"UnitAIController\");
	public Tag Tag => IsPlayer ? Tag.Player : Tag.Enemy;
	public Weapon EquippedWeapon => Utils.GetNodeByType<Weapon>(this);

	public override void _Ready()
	{
		myCurrentStats = GetNode<UnitStats>(\"Stats/Current\");
		myBaseStats = GetNode<UnitStats>(\"Stats/Base\");
		healthBar = GetNode<TextureProgress>(\"HealthBar\");
		currentFramePosition = GlobalPosition;
		previousFramePosition = GlobalPosition;
	}
	public override void _PhysicsProcess(float deltaTime)
	{
		previousFramePosition = currentFramePosition;
		currentFramePosition = GlobalPosition;
	}

	#region API
	public void PlayAnimation(string animationName)
	{
		var animatedSprite = GetNode<AnimatedSprite>(\"AnimatedSprite\");
		animatedSprite.Play(animationName);
	}
	/// <summary>
	/// Moves 1 Frame in the given direction.
	/// Vector2 direction should only have -1, 0 and 1 as values.
	/// Moves using own speed from StatsComponent.
	/// This should be used inside a _Process function.
	/// </summary>
	public void MoveInDirection(Vector2 direction)
	{
		MoveAndSlide(direction.Normalized() * myCurrentStats.Speed);
	}
	/// <summary>
	/// Returns the closest Unit within range of me with a different Tag.
	/// The range parameter is optional.
	/// Will use the equipped weapon's range if it's -1, or automatic if no weapon is equipped.
	/// This should be used inside a _Process function.
	/// </summary>
	public Unit AcquireTarget(float range = -1)
	{
		var targetAcquirer = GetNode<TargetAcquirer>(\"TargetAcquirer\");
		if (range == -1)
		{
			if (EquippedWeapon != null) {
				return (Unit)targetAcquirer.AcquireTarget(EquippedWeapon.AttackRange);
			}
			else
				return (Unit)targetAcquirer.AcquireTarget();
		}
		else
			return (Unit)targetAcquirer.AcquireTarget(range);
	}
	public void ShootWeaponAt(Unit targetToShootAt)
	{
		var weaponEquipped = Utils.GetNodeByType<Weapon>(this);
		if(targetToShootAt == null)
		{
			GD.Print($\"Unit {Name} can't shoot a null targetToShootAt, silly!\");
			return;
		}
		if(weaponEquipped == null)
		{
			GD.Print($\"Unit {Name} has no weapon equipped. Add as child node a Sprite with a T: Weapon script.\");
			return;
		}
		weaponEquipped.Shoot(GlobalPosition, targetToShootAt.GlobalPosition + new Vector2(0, SHOOT_Y_OFFSET));
	}

	public void ReceiveHit(Unit fromUnit)
	{
		if(myCurrentStats.Health == 0)
			return;

		myCurrentStats.Health -= fromUnit.EquippedWeapon.Damage;
		myCurrentStats.Health = Mathf.Clamp(myCurrentStats.Health, 0, myBaseStats.Health);

		UpdateHealthBar();

		if(myCurrentStats.Health == 0)
			Die();
	}
	public void ReceiveHit(float damageAmount, Unit fromUnit = null)
	{
		if (myCurrentStats.Health == 0)
			return;
			
		myCurrentStats.Health -= damageAmount;
		myCurrentStats.Health = Mathf.Clamp(myCurrentStats.Health, 0, myBaseStats.Health);

		UpdateHealthBar();

		if(myCurrentStats.Health == 0)
			Die();
	}

	private void Die()
	{

	}
	private void UpdateHealthBar()
	{
		healthBar.MinValue = 0;
		healthBar.MaxValue = myBaseStats.Health;
		healthBar.Value = myCurrentStats.Health;
	}
	#endregion
}
"

[node name="World" type="Node"]
script = ExtResource( 5 )
__meta__ = {
"_editor_description_": "Do NOT rename this node.
The name of the World node is used throughout the project."
}

[node name="SINGLETONS" type="Node" parent="."]

[node name="Delay" type="Node" parent="SINGLETONS"]
script = ExtResource( 7 )

[node name="TileManager" type="Node" parent="SINGLETONS"]
script = ExtResource( 6 )

[node name="InputHandler" type="Node" parent="SINGLETONS"]
script = ExtResource( 14 )

[node name="ground" type="TileMap" parent="."]
z_index = -2
tile_set = ExtResource( 8 )
cell_size = Vector2( 32, 32 )
cell_custom_transform = Transform2D( 32, 0, 0, 32, 0, 0 )
format = 1
tile_data = PoolIntArray( 0, 0, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 4, 0, 0, 5, 0, 0, 6, 0, 0, 7, 0, 0, 8, 0, 0, 9, 0, 0, 10, 0, 0, 11, 0, 0, 12, 0, 0, 13, 0, 0, 14, 0, 0, 15, 0, 0, 65536, 0, 0, 65537, 0, 0, 65538, 0, 0, 65539, 0, 0, 65540, 0, 0, 65541, 0, 0, 65542, 0, 0, 65543, 0, 0, 65544, 0, 0, 65545, 0, 0, 65546, 0, 0, 65547, 0, 0, 65548, 0, 0, 65549, 0, 0, 65550, 0, 0, 65551, 0, 0, 131072, 0, 0, 131073, 0, 0, 131074, 0, 0, 131075, 0, 0, 131076, 0, 0, 131077, 0, 0, 131078, 0, 0, 131079, 0, 0, 131080, 0, 0, 131081, 0, 0, 131082, 0, 0, 131083, 0, 0, 131084, 0, 0, 131085, 0, 0, 131086, 0, 0, 131087, 0, 0, 196608, 0, 0, 196609, 0, 0, 196610, 0, 0, 196611, 0, 0, 196612, 0, 0, 196613, 0, 0, 196614, 0, 0, 196615, 0, 0, 196616, 0, 0, 196617, 0, 0, 196618, 0, 0, 196619, 0, 0, 196620, 0, 0, 196621, 0, 0, 196622, 0, 0, 196623, 0, 0, 262144, 0, 0, 262145, 0, 0, 262146, 0, 0, 262147, 0, 0, 262148, 0, 0, 262149, 0, 0, 262150, 0, 0, 262151, 0, 0, 262152, 0, 0, 262153, 0, 0, 262154, 0, 0, 262155, 0, 0, 262156, 0, 0, 262157, 0, 0, 262158, 0, 0, 262159, 0, 0, 327680, 0, 0, 327681, 0, 0, 327682, 0, 0, 327683, 0, 0, 327684, 0, 0, 327685, 0, 0, 327686, 0, 0, 327687, 0, 0, 327688, 0, 0, 327689, 0, 0, 327690, 0, 0, 327691, 0, 0, 327692, 0, 0, 327693, 0, 0, 327694, 0, 0, 327695, 0, 0, 393216, 0, 0, 393217, 0, 0, 393218, 0, 0, 393219, 0, 0, 393220, 0, 0, 393221, 0, 0, 393222, 0, 0, 393223, 0, 0, 393224, 0, 0, 393225, 0, 0, 393226, 0, 0, 393227, 0, 0, 393228, 0, 0, 393229, 0, 0, 393230, 0, 0, 393231, 0, 0, 458752, 0, 0, 458753, 0, 0, 458754, 0, 0, 458755, 0, 0, 458756, 0, 0, 458757, 0, 0, 458758, 0, 0, 458759, 0, 0, 458760, 0, 0, 458761, 0, 0, 458762, 0, 0, 458763, 0, 0, 458764, 0, 0, 458765, 0, 0, 458766, 0, 0, 458767, 0, 0, 524288, 0, 0, 524289, 0, 0, 524290, 0, 0, 524291, 0, 0, 524292, 0, 0, 524293, 0, 0, 524294, 0, 0, 524295, 0, 0, 524296, 0, 0, 524297, 0, 0, 524298, 0, 0, 524299, 0, 0, 524300, 0, 0, 524301, 0, 0, 524302, 0, 0, 524303, 0, 0, 589824, 0, 0, 589825, 0, 0, 589826, 0, 0, 589827, 0, 0, 589828, 0, 0, 589829, 0, 0, 589830, 0, 0, 589831, 0, 0, 589832, 0, 0, 589833, 0, 0, 589834, 0, 0, 589835, 0, 0, 589836, 0, 0, 589837, 0, 0, 589838, 0, 0, 589839, 0, 0 )

[node name="props" type="TileMap" parent="."]
tile_set = ExtResource( 8 )
cell_size = Vector2( 32, 32 )
cell_custom_transform = Transform2D( 32, 0, 0, 32, 0, 0 )
cell_tile_origin = 2
cell_y_sort = true
collision_use_kinematic = true
collision_layer = 3
collision_mask = 2
format = 1
tile_data = PoolIntArray( 65544, 5, 0, 196615, 2, 0, 196617, 2, 2, 262149, 5, 0, 262151, 2, 65536, 262153, 2, 65538, 327687, 2, 131072, 327688, 2, 131073, 327689, 2, 131074, 393218, 5, 0, 393223, 2, 262144, 393224, 2, 262145, 393225, 2, 262146 )

[node name="TargetFollowingUnit" parent="." instance=ExtResource( 2 )]
scale = Vector2( 0.5, 0.5 )

[node name="YSort" type="YSort" parent="."]

[node name="DumbBanditUnit" parent="YSort" instance=ExtResource( 10 )]
position = Vector2( 47, 172 )

[node name="RatPlayer" parent="YSort" instance=ExtResource( 4 )]
position = Vector2( 160, 176 )
script = SubResource( 2 )

[node name="BroadswordWeapon" parent="YSort/RatPlayer" instance=ExtResource( 16 )]
position = Vector2( 1, -7 )
scale = Vector2( 0.34375, 0.666668 )

[node name="UnitPlayerController" parent="YSort/RatPlayer" instance=ExtResource( 1 )]

[node name="Camera2D" type="Camera2D" parent="YSort/RatPlayer"]
z_index = 999
current = true
zoom = Vector2( 0.3, 0.3 )

[node name="Joystick" type="Sprite" parent="YSort/RatPlayer/Camera2D"]
modulate = Color( 1, 1, 1, 0.470588 )
position = Vector2( -112, -176 )
scale = Vector2( 0.1, 0.1 )
texture = ExtResource( 12 )

[node name="Handle" type="Sprite" parent="YSort/RatPlayer/Camera2D/Joystick"]
scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 13 )

[node name="RatAI" parent="YSort" instance=ExtResource( 4 )]
position = Vector2( 222, 151 )

[node name="UnitAIController" parent="YSort/RatAI" instance=ExtResource( 3 )]

[node name="RatAI2" parent="YSort" instance=ExtResource( 4 )]
position = Vector2( 161, 112 )

[node name="UnitAIController" parent="YSort/RatAI2" instance=ExtResource( 3 )]
