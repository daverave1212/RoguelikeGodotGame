[gd_scene load_steps=28 format=2]

[ext_resource path="res://Prefabs/Units/UnitCustomComponents/UnitAnimationHandler.tscn" type="PackedScene" id=1]
[ext_resource path="res://Prefabs/Units/UnitCustomComponents/TargetAcquirer.tscn" type="PackedScene" id=2]
[ext_resource path="res://Images/Units/Ratfolk Mage Sprite Sheet.png" type="Texture" id=3]
[ext_resource path="res://Scripts/Units/UnitStats.cs" type="Script" id=4]
[ext_resource path="res://Images/UI/grey_button05.png" type="Texture" id=6]
[ext_resource path="res://Images/UI/grey_button00.png" type="Texture" id=7]

[sub_resource type="CSharpScript" id=23]
script/source = "using Godot;

public class Unit : KinematicBody2D
{
	const float SHOOT_Y_OFFSET = -8f;

	private UnitStats myCurrentStats, myBaseStats;
	private Vector2 previousFramePosition, currentFramePosition;
	private TextureProgress healthBar;

	public bool IsDead => myCurrentStats.Health == 0;
	public bool IsMoving => previousFramePosition.x != currentFramePosition.x && previousFramePosition.y != currentFramePosition.y;
	public bool IsPlayer => HasNode(\"UnitPlayerController\");
	public bool IsEnemy => HasNode(\"UnitAIController\");
	public Tag Tag => IsPlayer ? Tag.Player : Tag.Enemy;
	public Weapon EquippedWeapon => Utils.GetNodeByType<Weapon>(this);

	public override void _Ready()
	{
		myCurrentStats = GetNode<UnitStats>(\"Stats/Current\");
		myBaseStats = GetNode<UnitStats>(\"Stats/Base\");
		healthBar = GetNode<TextureProgress>(\"HealthBar\");
		currentFramePosition = GlobalPosition;
		previousFramePosition = GlobalPosition;
	}
	public override void _PhysicsProcess(float deltaTime)
	{
		previousFramePosition = currentFramePosition;
		currentFramePosition = GlobalPosition;
	}

	#region API
	public void PlayAnimation(string animationName)
	{
		var animatedSprite = GetNode<AnimatedSprite>(\"AnimatedSprite\");
		animatedSprite.Play(animationName);
	}
	/// <summary>
	/// Moves 1 Frame in the given direction.
	/// Vector2 direction should only have -1, 0 and 1 as values.
	/// Moves using own speed from StatsComponent.
	/// This should be used inside a _Process function.
	/// </summary>
	public void MoveInDirection(Vector2 direction)
	{
		MoveAndSlide(direction.Normalized() * myCurrentStats.Speed);
	}
	/// <summary>
	/// Returns the closest Unit within range of me with a different Tag.
	/// The range parameter is optional.
	/// Will use the equipped weapon's range if it's -1, or automatic if no weapon is equipped.
	/// This should be used inside a _Process function.
	/// </summary>
	public Unit AcquireTarget(float range = -1)
	{
		var targetAcquirer = GetNode<TargetAcquirer>(\"TargetAcquirer\");
		if (range == -1)
		{
			if (EquippedWeapon != null) {
				return (Unit)targetAcquirer.AcquireTarget(EquippedWeapon.AttackRange);
			}
			else
				return (Unit)targetAcquirer.AcquireTarget();
		}
		else
			return (Unit)targetAcquirer.AcquireTarget(range);
	}
	public void ShootWeaponAt(Unit targetToShootAt)
	{
		var weaponEquipped = Utils.GetNodeByType<Weapon>(this);
		if(targetToShootAt == null)
		{
			GD.Print($\"Unit {Name} can't shoot a null targetToShootAt, silly!\");
			return;
		}
		if(weaponEquipped == null)
		{
			GD.Print($\"Unit {Name} has no weapon equipped. Add as child node a Sprite with a T: Weapon script.\");
			return;
		}
		weaponEquipped.Shoot(GlobalPosition, targetToShootAt.GlobalPosition + new Vector2(0, SHOOT_Y_OFFSET));
	}

	public void ReceiveHit(Unit fromUnit)
	{
		if(myCurrentStats.Health == 0)
			return;

		myCurrentStats.Health -= fromUnit.EquippedWeapon.Damage;
		myCurrentStats.Health = Mathf.Clamp(myCurrentStats.Health, 0, myBaseStats.Health);

		UpdateHealthBar();

		if(myCurrentStats.Health == 0)
			Die();
	}
	public void ReceiveHit(float damageAmount, Unit fromUnit = null)
	{
		if (myCurrentStats.Health == 0)
			return;
			
		myCurrentStats.Health -= damageAmount;
		myCurrentStats.Health = Mathf.Clamp(myCurrentStats.Health, 0, myBaseStats.Health);

		UpdateHealthBar();

		if(myCurrentStats.Health == 0)
			Die();
	}

	private void Die()
	{

	}
	private void UpdateHealthBar()
	{
		healthBar.MinValue = 0;
		healthBar.MaxValue = myBaseStats.Health;
		healthBar.Value = myCurrentStats.Health;
	}
	#endregion
}
"

[sub_resource type="RectangleShape2D" id=3]
extents = Vector2( 4, 1.5 )

[sub_resource type="RectangleShape2D" id=22]
extents = Vector2( 4.5, 7.5 )

[sub_resource type="AtlasTexture" id=4]
atlas = ExtResource( 3 )
region = Rect2( 0, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=5]
atlas = ExtResource( 3 )
region = Rect2( 32, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=6]
atlas = ExtResource( 3 )
region = Rect2( 64, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=7]
atlas = ExtResource( 3 )
region = Rect2( 96, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=8]
atlas = ExtResource( 3 )
region = Rect2( 128, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=9]
atlas = ExtResource( 3 )
region = Rect2( 160, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=10]
atlas = ExtResource( 3 )
region = Rect2( 192, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=11]
atlas = ExtResource( 3 )
region = Rect2( 224, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=12]
atlas = ExtResource( 3 )
region = Rect2( 0, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=13]
atlas = ExtResource( 3 )
region = Rect2( 32, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=14]
atlas = ExtResource( 3 )
region = Rect2( 64, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=15]
atlas = ExtResource( 3 )
region = Rect2( 96, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=16]
atlas = ExtResource( 3 )
region = Rect2( 128, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=17]
atlas = ExtResource( 3 )
region = Rect2( 160, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=18]
atlas = ExtResource( 3 )
region = Rect2( 192, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=19]
atlas = ExtResource( 3 )
region = Rect2( 224, 32, 32, 32 )

[sub_resource type="SpriteFrames" id=20]
animations = [ {
"frames": [ SubResource( 4 ), SubResource( 5 ), SubResource( 6 ), SubResource( 7 ), SubResource( 8 ), SubResource( 9 ), SubResource( 10 ), SubResource( 11 ) ],
"loop": true,
"name": "Idle",
"speed": 5.0
}, {
"frames": [ SubResource( 12 ), SubResource( 13 ), SubResource( 14 ), SubResource( 15 ), SubResource( 16 ), SubResource( 17 ), SubResource( 18 ), SubResource( 19 ) ],
"loop": true,
"name": "Walk",
"speed": 15.0
} ]

[sub_resource type="OccluderPolygon2D" id=21]
polygon = PoolVector2Array( -4, -3, -4, 0, 4, 0, 4, -3 )

[node name="UnitTemplate" type="KinematicBody2D"]
collision_layer = 2
collision_mask = 3
script = SubResource( 23 )

[node name="HitboxMovement" type="CollisionShape2D" parent="."]
position = Vector2( 0, -1.5 )
shape = SubResource( 3 )

[node name="Stats" type="Node" parent="."]

[node name="Current" type="Node" parent="Stats"]
script = ExtResource( 4 )
Health = 10.0

[node name="Base" type="Node" parent="Stats"]
script = ExtResource( 4 )
Health = 10.0

[node name="Hitboxes" type="StaticBody2D" parent="."]
collision_layer = 4
collision_mask = 8

[node name="HitboxBody" type="CollisionShape2D" parent="Hitboxes"]
position = Vector2( -0.5, -7.5 )
shape = SubResource( 22 )

[node name="UnitAnimationHandler" parent="." instance=ExtResource( 1 )]

[node name="HealthBar" type="TextureProgress" parent="."]
margin_left = -12.0
margin_top = -25.0
margin_right = 178.0
margin_bottom = 24.0
rect_scale = Vector2( 0.13, 0.1 )
value = 100.0
texture_under = ExtResource( 6 )
texture_progress = ExtResource( 7 )
texture_progress_offset = Vector2( 2, 2 )
tint_under = Color( 0.392157, 0, 0, 1 )
tint_progress = Color( 1, 0, 0, 1 )

[node name="TargetAcquirer" parent="." instance=ExtResource( 2 )]
position = Vector2( 0, 0 )

[node name="AnimatedSprite" type="AnimatedSprite" parent="."]
light_mask = 2
frames = SubResource( 20 )
animation = "Idle"
frame = 3
playing = true
offset = Vector2( 0, -16 )

[node name="LightOccluder2D" type="LightOccluder2D" parent="."]
occluder = SubResource( 21 )

[editable path="TargetAcquirer"]
